This file is just for me, to remember what happened because because I'm writing a thesis about it.


#+-------------------------------------------- 24.01.2022 --------------------------------------------+

Das Einführen scale in den Textures löste den Bug mit den weissen Linien.
-> Engine kann jetzt endlich sogar für Rendering benutzt werden :D.

Performance Verbesserungen durch die Verwendung von "memcpy" beim clearen von Layers.

Ich habe eine kleine Scene kreiert um Pixa zu testen (img/engine_test_24.01.2022.png):

void main_onUpdate()
{
    clear_layer();

    for (int y = 0; y < get_width(); y += 10)
        for(int x = 0; x < get_height(); x += 10)
            draw_pixel(x, y);
}

int main()
{
    create_engine(500, 500, 1, 1);
    create_scene(NULL, main_onUpdate, NULL);

    set_clear_color(COLOR_VERY_DARK_GREY);

    start_engine();
}

Die Scene rendert mit bis zu 3500 FPS.


Programmier Zeit: 10h

#+-------------------------------------------- 26.01.2022 --------------------------------------------+

Heute habe ich eine neue Version von Layern implementiert.
Layers werden jetzt mehr wie Textures verwendet.
So ist die Engine für den Benutzer einheitlicher.

Programmier Zeit: 3h

#+-------------------------------------------- 27.01.2022 --------------------------------------------+

Die Layers waren sehr verbuggt.
Es gab einen Bug mit dem layer_draw_stack, da die Pointer immer noch zur alten Stelle gezeigt haben,
die Layers aber schon an eine neue Stelle kopiert worden waren, da ein neuer layer kreiert wurde.
Dieser Bug gab lustige access violation exceptions.

Des weiteren habe ich gemacht, dass die Layers eine clear_texture haben.
Wenn man clear() aufruft, werden die Daten von der clear_texture zu der richtigen Texture kopiert.
Das sollte performanter sein, als jedes Mal die Texture von hand zu clearen, da "memcpy" sehr schnell ist.
Jedoch muss ich, wenn man irgenwann die Texturen resizen kann, die clear_texture neu setzten.

Programmier Zeit: 2h

#+-------------------------------------------- 28.01.2022 --------------------------------------------+

Heute habe ich nochmal eine neue und bessere Implementierung von den Layers geschrieben.
Die Layers können jetzt viel einfacher kreiert werden als vorher.
Jetzt werden nicht mehr die IDs, sondern nur noch die Pointers zu den Layers gespeichert.

Zudem kann die Engine jetzt Linien zeichnen.
Ich bezweifle jedoch, das meine Implementation von den Linien sehr performant ist.
Deshalb werde ich diese Funktion vermutlich in der Zukunft nochmals überarbeiten.

Ich habe auch den Core weiter auseinander genommen.
Jetzt ist es einfacher für den Nutzer, sich den Code durchzulesen,
da alles jetzt schön sortiert ist und nicht mehr alles in einem File.
Ich überlege mir aber noch, die Globals in core.h zu verschieben.

Ich werde vermutlich schon bald mit einer ersten Version einer Fluidsimulation meine Engine aufs äusserste testen.
Mein Ziel ist es, fortlaufend ein Interface zu programmieren, dass das Managen von Computeshadern einfach macht.
Daraus erhoffe ich mir dann eine gute Performance.

Programmier Zeit: 3h

#+-------------------------------------------- 03.02.2022 --------------------------------------------+

Ich habe die log Funktion verbessert.
Jetzt kann man ein LOG_LEVEL definieren, und es werden z.B. nur noch Errors und keine Warnings mehr angezeigt.

Des weiteren habe ich die draw_line Funktion verbessert.
Horizontale linien werden jetzt effizienter gerendert.
Das bedeutet, das Rechtecke effizient gerendert werden können, da sie nur aus graden linien bestehen.

Ich habe die funktion draw_rect jetzt implementiert.
Das bedeuted, dass man jetzt endlich Rechtecke zeichnen kann, jedoch noch keine ausgefüllten Rechtecke.

Die Globals sind jetzt nicht mehr im globals.h header, sondern im core.h.

Programmier Zeit: 4h

#+-------------------------------------------- 04.02.2022 --------------------------------------------+

Ich habe fill_rect implementiert.
Jetzt kann man auch ausgefüllte Rechtecke zeichnen

Zudem habe ich viel code refactored.
Jetzt sollte alles etwas einheitlicher sein.
Jedoch wird vermutlich sowieso alles nochmal ändern.

Programmier Zeit: 2h

#+-------------------------------------------- 12.02.2022 --------------------------------------------+

Ich habe es endlich geschafft, Pixa zu einem lib-file mit clang zu compilen.
Jetzt wird zuerst ein lib-file generiert und erst dann wird das gewünschte Projekt kompiliert und ausgeführt.
Das macht es deutlich einfacher, ein Projekt mit Pixa zu kreieren,
da nicht jedes Mal der ganze sourcecode neu kompiliert werden muss,
sondern nur noch pixa32s.lib gelinkt werden muss.

Programier Zeit: 3h

#+-------------------------------------------- 13.02.2022 --------------------------------------------+

Jetzt gibt es endlich userinput.
Jedoch muss ich noch schauen, wie ich das mit dem layout mache...
Momentan wird einfach das von GLFW übernommen.
GLFW benutzt qwerty stat qwertz.
Ich möchte das sowieso nochmals überarbeiten, dammit ich einen bool[] habe statt eine callback funktion.

Programier Zeit: 1h